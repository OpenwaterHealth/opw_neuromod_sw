%% Make sure that fus is on MATLAB's search path.
addpath(fileparts(fileparts(mfilename('fullpath'))))
if isempty(which('fus.Database'))
    error('fus needs to be added to the path. Run this example as a script or add it manually to continue');
end
%% Load the same database we used in the first example
user_dir = fus.Database.get_default_user_dir();
db_path = fullfile(user_dir, "Documents", "db");
db = fus.Database(path=db_path);
%% Retrieve Subject and Session IDs
% If we already know the IDs, we can assign them directly, but Database
% objects also provide interactive ways of selecting subjects and sessions.
choose_interactive = false; % set this to false to bypass selection
if choose_interactive
    subject_id = db.choose_subject();
    subject = db.load_subject(subject_id);
    session_id = db.choose_session(subject);
else
    subject_table = db.get_subject_table()
    subject_id = 'example_subject';
    subject = db.load_subject(subject_id);
    session_table = db.get_session_table(subject_id)
    session_id = 'example_session';
end
session = db.load_session(subject, session_id);
% We'll transform the Session data into a Scene, which is a contains the
% volume, targets, transducer and markers, but drops other metadata. 
scene = session.to_scene(id="raw", name="Raw Scene");    
base = scene.transform_base();
%%
figure(1);clf
base.volumes.slice(0,0,0)
%% Create Treatment Plan
% The Treatment Plan contains the specification for a particular treatment.
% It contains the pulse and sequence parameters, the arrangement of foci
% around the nominal target, and the simulation grid. It also includes
% the beamforming strategy for computing delays and apodizations, 
% constraints on the location of targets relative to the transducer, and
% constraints on the derived parameters for throwing warnings or errors.
plan_id = "example_plan";
plan = fus.treatment.Plan(...
    id=plan_id,...
    name="Example Plan", ...
    description=sprintf("Example plan created %s", datestr(now)),...
    pulse=fus.Pulse(... % The transmitted pulse parameters
            frequency=500e3, ... % Hz
            duration=10/500e3, ... % s
            amplitude=1), ... % V
    sequence=fus.Sequence(... The sequence of pulses
        pulse_interval=100e-3, ... pulse repetition interval (s)
        pulse_count=10, ... number of pulses per pulse train
        pulse_train_interval=1, ... pulse train repitition interval (s)
        pulse_train_count=1), ... number of pulse trains
    focal_pattern=fus.bf.focalpatterns.SinglePoint(... % The orientation of foci around the nominal target
        target_pressure=1e6),... %SinglePoint is just a single target
    sim_setup=fus.sim.Setup(... % The requested spatial extent of the simulation space
        x_extent=[-30,30],...
        y_extent=[-30 30],...
        z_extent=[-4,70])...
    );
db.add_plan(plan, on_conflict="overwrite");
%%
% We'll use the plan to transform the scene into the transducer's frame or
% reference resampling along the specified simulation grid. This process
% also computes the the parameter maps (speed of sound, density,
% attenuation etc.) for the transformed scene. 
sim_scene = plan.transform_sim_scene(scene);
%
% Now we'll generate a Treatment Solution. A Treatment Solution is a 
% session-specific specification of the signals that must be generated by
% the transducer in order to generate focal pressures at the requested
% location. This step computes delays, runs a simulation, and adjusts the
% transmit parameters to scale the output to the target pressure.
[solution, output] = plan.calc_solution(sim_scene);
db.add_solution(solution, subject_id, session_id, "output", output, "on_conflict", "overwrite");
%% Visualize the Simulation output
% First, we'll generate some ColorMapper objects to scale the output data
mapper_mri = fus.ColorMapper(...
    cmap=bone(256), ...
    clim_in=[0, 180], ...
    alim_in=[0.2, 0.3], ...
    alim_out=[0, .8]);
mapper_pmax = fus.ColorMapper(...
    cmap=jet(256), ...
    clim_in=[0 1e6], ...
    alim_in=[1e5, 4e5], ...
    alim_out=[0, 0.6]);
vols = [sim_scene.volumes(1), output.pnp];
mappers = [mapper_mri mapper_pmax];

% We can overlay the data in 2D images:
figure(2);clf;
vols.sel('ele',0).draw_image(mappers, colorbar_index=2);
set(gca,'color',[0.1, 0.2, 0.3])

% We can also generate 3D surface plots with overlain data
figure(3);clf
slices = {0,0,[0 40e-3]};
for i = 1:length(vols.dims)
    dim = vols.dims(i);
    vols.sel(dim, slices{i}).draw_surface(mappers, colorbar_index=2);
    hold on
end
set(gca,'color',[0.1, 0.2, 0.3])
axis image
